/*Структура CandyBar включает три члена, как описано в предыдущем упражнении.
Напишите программу, которая создает массив из трех структур CandyBar,
инициализирует их значениями по вашему усмотрению и затем отображает
содержимое каждой структуры.

Выполните упражнение 6, но вместо объявления массива из трех структур 
CandyBar используйте операцию new для динамического размещения массива.*/
#include<iostream>

int main()
{
	using namespace std;
	struct CandyBar
	{
		string c_name[80];
		double d_weight;
		int i_calories;
	};
	
	CandyBar* snack = new CandyBar; //{ "Mocha Munch", 2.3, 350 };
	CandyBar* snack1 = new CandyBar; //{ "Kuku-Ruku", 3.8, 320 };
	CandyBar* snack2 = new CandyBar; //{ "Wagon Weels", 2.8, 340 };
	
	*snack->c_name = "Mocha Munch";
	snack->d_weight = 2.3;
	cout << "the contents of the massiv[0] variable" << "\n";
	cout << "Name: " << "\"" << * snack->c_name << "\"" << "\n";
	cout << "Weigth: " << snack->d_weight << "\n";
	/*cout << "Calories: " << *snack->i_calories << "\n" << "\n";

	cout << "the contents of the massiv[1] variable" << "\n";
	cout << "Name: " << "\"" << *snack1->c_name << "\"" << "\n";
	cout << "Weigth: " << snack1.d_weight << "\n";
	cout << "Calories: " << snack1.i_calories << "\n" << "\n";

	cout << "the contents of the massiv[2] variable" << "\n";
	cout << "Name: " << "\"" << *snack2->c_name << "\"" << "\n";
	cout << "Weigth: " << snack2.d_weight << "\n";
	cout << "Calories: " << snack2.i_calories << "\n" << "\n";*/

	delete snack;
	//delete snack1;
	//delete snack2;
	cin.get();
	return 0;
}
