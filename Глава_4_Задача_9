/*Структура CandyBar включает три члена, как описано в предыдущем упражнении.
Напишите программу, которая создает массив из трех структур CandyBar,
инициализирует их значениями по вашему усмотрению и затем отображает
содержимое каждой структуры.

Выполните упражнение 6, но вместо объявления массива из трех структур 
CandyBar используйте операцию new для динамического размещения массива.*/
#include<iostream>
#include<string>
int main()
{
	using namespace std;
	struct CandyBar
	{
		char c_name[80];
		double d_weight;
		int i_calories;
	};
	
	CandyBar* all_snack = new CandyBar[3];
	/* { "Mocha Munch", 2.3, 350 };
	{ "Kuku-Ruku", 3.8, 320 };
	{ "Wagon Weels", 2.8, 340 };*/
	
	cout << "Enter name of snack1: " << "\n";
	cin >> all_snack[0].c_name;
	cout << "Enter weigth: " << "\n";
	cin >> all_snack[0].d_weight;
	cout << "Enter calories: " << "\n";
	cin >> all_snack[0].i_calories;
	cout << endl;

	cout << "Enter name of snack2: " << "\n";
	cin >> all_snack[1].c_name;
	cout << "Enter weigth: " << "\n";
	cin >> all_snack[1].d_weight;
	cout << "Enter calories: " << "\n";
	cin >> all_snack[1].i_calories;
	cout << endl;

	cout << "Enter name of cnack3: " << "\n";
	cin >> all_snack[2].c_name;
	cout << "Enter weigth: " << "\n";
	cin >> all_snack[2].d_weight;
	cout << "Enter calories: " << "\n";
	cin >> all_snack[2].i_calories;
	cout << endl;

	cout << "Name snack1: " << all_snack[0].c_name << "\, " << "Weight snack1: " << all_snack[0].d_weight << "\, " 
		 << "Calories snack1: " << all_snack[0].i_calories << endl;
	cout << "Name snack1: " << all_snack[1].c_name << "\, " << "Weight snack1: " << all_snack[1].d_weight << "\, " 
		 << "Calories snack1: " << all_snack[1].i_calories << endl;
	cout << "Name snack1: " << all_snack[2].c_name << "\, " << "Weight snack1: " << all_snack[2].d_weight << "\, " 
		 << "Calories snack1: " << all_snack[2].i_calories << endl;


	delete all_snack;
	cin.get();
	return 0;
}
